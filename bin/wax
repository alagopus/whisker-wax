#!/usr/bin/env node
/* vim: set ai sw=2 et terse: */

if (process.argv.length < 3) {
  console.error('usage: wax <template> [<input> [<output>]]')
  process.exit(1)
}

const fs = require('fs')
const path = require('path')
const parser = require('../lib/parser')

/**
 * Open input from a file, or stdin if fileName is '-'.
 * @returns {stream.Readable} opened stream.
 */
function openInput (fileName) {
  if (fileName !== '-') {
    return fs.createReadStream(fileName, { encoding: 'utf8' })
  }
  process.stdin.setEncoding('utf8')
  process.stdin.resume()
  return process.stdin
}

/**
 * Read all from an input stream and return a promise resolving its contents as string.
 * @returns {Promise} resolving to the stream contents.
 */
function readAll (inputStream) {
  let result = ''
  return new Promise(resolve => {
    inputStream.on('error', err => {
      console.log('read error', err)
      process.exit(1)
    })
    inputStream.on('data', function (chunk) {
      result += chunk
    })
    inputStream.on('end', () => {
      resolve(result)
    })
  })
}

function resolver (base) {
  return name => {
    let filename
    let parsefile = JSON.parse
    let basename = path.resolve(base, name)
    if (fs.existsSync(basename)) {
      filename = basename
    } else if (fs.existsSync(basename + '.json')) {
      filename = basename + '.json'
    } else if (fs.existsSync(basename + '.mustache')) {
      filename = basename + '.mustache'
    }
    if (filename && /\.mustache$/i.test(filename)) {
      parsefile = parser
    }
    return {
      template: parsefile(fs.readFileSync(filename)),
      resolver: resolver(path.dirname(filename)),
      context: { '$filename': filename }
    }
  }
}

readAll(openInput(process.argv[2])).then(template => {
  let parsedTemplate = parser(template)
  if (process.argv.length < 4) {
    process.stdout.write(JSON.stringify(parsedTemplate, null, 2))
    process.exit(0)
  }
  let base = path.dirname(path.resolve(process.argv[2]))
  if (/.js$/.test(process.argv[3])) {
    return [parsedTemplate, require(process.argv[3]), resolver(base)]
  }
  return readAll(openInput(process.argv[3])).then(input => {
    return [parsedTemplate, JSON.parse(input), resolver(base)]
  })
}).then(params => {
  if (params) {
    let Runner = require('../lib/runner')
    let instance = new Runner(process.stdout)
    instance.run.apply(instance, params)
  }
}).catch(failure => {
  process.stderr.write('error: ' + failure + '\n' + failure.stack + '\n')
  process.exit(1)
})
